#ifndef SCRIPT_GENERATOR
#define SCRIPT_GENERATOR

#include <stdio.h>
#include <string>
#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <iomanip>
#include <vector>
#include <opencv2/opencv.hpp>
#include <chain_sequence.h>
#include <parser.h>

using namespace std;
using cv::Point;

class ScriptGenerator
{
private:
  float dec;
  uint cnt = 0;
  int rows, cols;
  std::string filename;

public:
  ScriptGenerator(const Config & config): dec(config.pixel?100:1)
  {
    bool flag = false;
    while(!flag){
      std::ostringstream oss;
      oss << "../img/contourFace" << cnt << ".pgm";
      filename = oss.str();
      std::ifstream file(filename, ios::in);
      if (!file) flag = true;
      else cnt += 1;
    }
  }

  void saveImage(const cv::Mat & im)
  {
    rows = im.rows;
    cols = im.cols;
    std::ostringstream oss;
    oss << "../img/contourFace" << cnt << ".pgm";
    filename = oss.str();
    imwrite( filename, im );
    std::cout << "Image has been saved in " << filename << "." << std::endl;
  }

  std::string GenerateFile(const vector<vector<Point> > &_contours, ChainSequence &_chain, int auto_pic = -1)
  {
      ostringstream oss;
      oss << "../dextarFile/drawFace" << ((auto_pic == -1)?cnt:auto_pic) << ".mp";
      filename = oss.str();

    ofstream file(filename, ios::out | ios::trunc);  // ouverture en Ã©criture avec effacement du fichier ouvert
    cnt++;

    float scale; // scale factor
    float s1 = (float)cols/74;
    float s2 = (float)rows/104;
    if (s1 > s2) scale = s1;
    else scale = s2;

    if(file)
    {
      cout << "Generation of the dextarFile, please wait..." << endl;

      file << std::fixed << std::setprecision(2);

      file << "! Mecaprol progam auto-generated by the C++ code for portrait drawing using Dextar robot" << endl;
      file << "! Author: Alexandre Sarazin & Vamsi Krishna Guda, Date: June, 11 2017" << endl << endl;
      file << "START;" << endl;
      file << "CFGLIN V150.0 A150.0; ! [Optional] Speed and acceleration settings for MoveL, etc." << endl;
      file << "CFGANG V150.0 A150.0; ! [Optional] Speed and acceleration settings for MoveJ and MoveC." << endl << endl;

      file << "! Definition of the world coordinate system" << endl;
      file << "WCS X72.0 Y18.0 Z0.05 W180.0;" << endl << endl;

      file << "! Definition of the tool coordinate system" << endl;
      file << "TCS Z-39.5;  ! For the pen" << endl << endl;

      file << "! Go to initial position in the working mode of the home configuration (++)" << endl;
      file << "MoveC X0.00 Y0.00 S100 M1; ! Pen is up by default" << endl << endl;

      Point p;
      for(unsigned int i=0;i<_chain.ordering_.size();++i)
      {
        // move to the first point to draw
        if(_chain.dir_[i])      p = _contours[_chain.ordering_[i]].back();
        else                    p = _contours[_chain.ordering_[i]].front();
        file << "MoveC X" << roundf((float)p.x/scale*dec)/dec << " Y" << -roundf((float)p.y/scale*dec)/dec << " M1 S100;" << endl << endl;

        // pen down
        file << "MoveZ Z0.0; ! Pen down" << endl;

        for(unsigned int j=0;j<_contours[_chain.ordering_[i]].size();++j)
        {
          if(_chain.dir_[i])
          {
            file << "MoveC X" << roundf((float)_contours[_chain.ordering_[i]][_contours[_chain.ordering_[i]].size()-j-1].x/scale*dec)/dec
                << " Y" << -roundf((float)_contours[_chain.ordering_[i]][_contours[_chain.ordering_[i]].size()-j-1].y/scale*dec)/dec << " M1 S100;" << endl;

          } else {
            file << "MoveC X" << roundf((float)_contours[_chain.ordering_[i]][j].x/scale*dec)/dec
                << " Y" << -roundf((float)_contours[_chain.ordering_[i]][j].y/scale*dec)/dec << " M1 S100;" << endl;
          }
        }
        // pen up
        file << "MoveZ Z3.00; ! Pen up" << endl << endl << endl;
      }

      file << "! Move DexTAR to its home configuration" << endl;
      file << "MoveZ L0.0;" << endl;
      file << "MoveJ A0.0 B0.0;" << endl;
      file << "END;" << endl;

      file.close();
      cout << "The dextarFile has been generated." << endl;
    }
    else
      cerr << "Impossible to open/create the dextarFile" << endl;
    file.close();
    cout << "Script has been saved in " << filename << "." << endl;

    return filename;
  }

};



#endif // SCRIPT_GENERATOR

